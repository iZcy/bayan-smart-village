name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          extensions: mbstring, dom, fileinfo, mysql, gd, bcmath, zip, sqlite3
          coverage: none

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: |
          composer install --no-progress --prefer-dist --optimize-autoloader --no-interaction || {
            echo "Lock file incompatible, updating dependencies..."
            composer update --no-progress --prefer-dist --optimize-autoloader --no-interaction
          }

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install NPM dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build assets
        run: npm run build

      - name: Generate application key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Create SQLite Database
        run: |
          mkdir -p database
          touch database/database.sqlite

      - name: Execute tests (Unit and Feature tests) via PHPUnit
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: |
          php artisan migrate --env=testing --database=sqlite --force
          php artisan db:seed --env=testing --force
          vendor/bin/phpunit

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          extensions: mbstring, dom, fileinfo, mysql, gd, bcmath, zip

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Composer dependencies
        run: |
          composer install --no-dev --optimize-autoloader --no-interaction || {
            echo "Lock file incompatible, updating dependencies..."
            composer update --no-dev --optimize-autoloader --no-interaction
          }

      - name: Install NPM dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build production assets
        run: npm run build

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            set -e  # Exit on any error

            echo "🚀 Starting deployment..."

            # Navigate to project directory
            cd /var/www/bayan-smart-village || {
              echo "❌ Failed to navigate to project directory"
              exit 1
            }

            # Check if git repository exists
            if [ ! -d ".git" ]; then
              echo "❌ Not a git repository. Please clone the repository first."
              exit 1
            fi

            # Create backup
            echo "📦 Creating backup..."
            if [ -d "backup" ]; then
              rm -rf backup
            fi
            mkdir backup
            cp -r storage backup/ 2>/dev/null || true
            cp .env backup/ 2>/dev/null || true

            # Stash any local changes
            echo "💾 Stashing local changes..."
            git stash push -m "Auto-stash before deployment $(date)"

            # Fetch and pull latest code
            echo "⬇️ Pulling latest code..."
            git fetch origin main || {
              echo "❌ Failed to fetch from origin"
              exit 1
            }

            # Check if we're on main branch, if not switch to it
            CURRENT_BRANCH=$(git branch --show-current)
            if [ "$CURRENT_BRANCH" != "main" ]; then
              echo "🔄 Switching to main branch..."
              git checkout main || {
                echo "❌ Failed to checkout main branch"
                exit 1
              }
            fi

            # Pull latest changes
            git pull origin main || {
              echo "❌ Failed to pull latest changes"
              exit 1
            }

            # Check if composer is available
            if ! command -v composer &> /dev/null; then
              echo "❌ Composer not found. Please install composer."
              exit 1
            fi

            # Install PHP dependencies
            echo "📦 Installing PHP dependencies..."
            composer install --no-dev --optimize-autoloader --no-interaction || {
              echo "❌ Failed to install PHP dependencies"
              exit 1
            }

            # Check if npm is available
            if ! command -v npm &> /dev/null; then
              echo "❌ NPM not found. Please install Node.js and npm."
              exit 1
            fi

            # Install NPM dependencies
            echo "📦 Installing NPM dependencies..."
            if [ -f package-lock.json ]; then
              npm ci || {
                echo "❌ Failed to install NPM dependencies"
                exit 1
              }
            else
              npm install || {
                echo "❌ Failed to install NPM dependencies"
                exit 1
              }
            fi

            # Build assets
            echo "🔨 Building assets..."
            npm run build || {
              echo "❌ Failed to build assets"
              exit 1
            }

            # Set correct ownership
            echo "🔐 Setting permissions..."
            sudo chown -R bayan-smart-village:bayan-smart-village /var/www/bayan-smart-village || {
              echo "⚠️ Warning: Failed to set ownership"
            }

            # Set directory permissions
            chmod -R 755 storage bootstrap/cache || {
              echo "⚠️ Warning: Failed to set directory permissions"
            }

            # Restore storage files if backup exists
            if [ -d "backup/storage" ]; then
              echo "📁 Restoring storage files..."
              cp -r backup/storage/app/public/* storage/app/public/ 2>/dev/null || true
            fi

            # Check if .env file exists
            if [ ! -f ".env" ]; then
              echo "❌ .env file not found. Please create it."
              exit 1
            fi

            # Run database migrations
            echo "🗄️ Running database migrations..."
            php artisan migrate --force || {
              echo "❌ Failed to run migrations"
              exit 1
            }

            # Clear and optimize Laravel caches
            echo "🧹 Clearing and optimizing caches..."
            php artisan config:clear || true
            php artisan route:clear || true
            php artisan view:clear || true
            php artisan cache:clear || true

            php artisan config:cache || {
              echo "⚠️ Warning: Failed to cache config"
            }
            php artisan route:cache || {
              echo "⚠️ Warning: Failed to cache routes"
            }
            php artisan view:cache || {
              echo "⚠️ Warning: Failed to cache views"
            }

            # Restart services
            echo "🔄 Restarting services..."
            sudo supervisorctl restart bayan-smart-village-worker:* 2>/dev/null || {
              echo "⚠️ Warning: Failed to restart supervisor workers"
            }

            sudo systemctl reload nginx || {
              echo "⚠️ Warning: Failed to reload nginx"
            }

            sudo systemctl reload php8.3-fpm || {
              echo "⚠️ Warning: Failed to reload PHP-FPM"
            }

            # Cleanup backup
            echo "🧹 Cleaning up..."
            rm -rf backup

            echo "🎉 Deployment completed successfully!"
            echo "📅 Deployed at: $(date)"
            echo "🔗 Git commit: $(git rev-parse --short HEAD)"

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security scanner
        uses: securecodewarrior/github-action-composer-security-checker@v3
        with:
          composer-lock: "./composer.lock"

  code-quality:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, dom, fileinfo, mysql
          tools: phpstan

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Run PHPStan
        run: vendor/bin/phpstan analyse --memory-limit=2G || true

      - name: Check code style with Laravel Pint
        run: vendor/bin/pint --test
